题目：不同路径的数量（带障碍和加权路径）
描述
给定一个 m x n 的二维网格，其中每个格子包含以下三种类型的内容：

0 表示空地。
-1 表示障碍物，路径无法穿过该格子。
其他正整数表示该格子的通行权重，路径通过该格子时会消耗一定的权重。
任务是从左上角的起点 (0, 0) 出发，到达右下角的终点 (m-1, n-1)。每次只能向右或向下移动，找到所有能到达终点的路径，并返回路径数，同时记录每条路径的总权重。

示例
plaintext
复制代码
输入:
grid = [
  [0, 2, 3],
  [1, -1, 1],
  [4, 1, 0]
]

输出:
{
  "path_count": 2,
  "path_weights": [7, 10]
}
解释
有两条路径可以从起点到终点：
路径 1：(0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)，总权重为 7。
路径 2：(0,0) -> (0,1) -> (1,2) -> (2,2)，总权重为 10。
解题思路
DFS和回溯法：使用递归深度优先遍历所有可能的路径。
路径终止条件：如果遇到障碍或越界，终止当前路径；如果到达终点，记录路径权重。
权重累加：每条路径的权重需要累加，通过回溯法，在递归返回时恢复之前的权重。
结果存储：用变量记录路径数，用列表保存所有路径的权重。
Python解答
我们使用递归来实现DFS和回溯。

python
复制代码
def unique_paths_with_weights(grid):
    m, n = len(grid), len(grid[0])
    path_count = 0
    path_weights = []

    def dfs(x, y, weight):
        nonlocal path_count
        # 如果越界或遇到障碍，则停止
        if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == -1:
            return
        # 如果到达终点
        if x == m - 1 and y == n - 1:
            path_count += 1
            path_weights.append(weight)
            return
        
        # 保存当前位置的权重，并标记为访问过
        current_weight = grid[x][y]
        grid[x][y] = -1  # 临时标记为障碍，防止重复访问
        
        # 向右或向下递归探索
        if y + 1 < n:  # 向右移动
            dfs(x, y + 1, weight + current_weight)
        if x + 1 < m:  # 向下移动
            dfs(x + 1, y, weight + current_weight)
        
        # 回溯，将格子恢复原样
        grid[x][y] = current_weight

    dfs(0, 0, 0)
    return {"path_count": path_count, "path_weights": path_weights}

# 测试示例
grid = [
    [0, 2, 3],
    [1, -1, 1],
    [4, 1, 0]
]
output = unique_paths_with_weights(grid)
print(output)
Python代码详解
dfs(x, y, weight)是递归函数，用于探索从(x, y)出发的所有路径。weight用于累加当前路径的权重。
递归条件：
终止条件：越界或遇到障碍返回；如果到达终点则记录路径数和权重。
递归分支：向右和向下移动。
回溯：在递归返回时将当前格子恢复原始权重，确保不同路径的探索不互相干扰。
C语言解答
在C语言中，由于需要动态管理路径计数和权重数组，我们可以使用递归和全局变量来记录结果。

c
复制代码
#include <stdio.h>

#define MAX_PATHS 100

int path_count = 0;
int path_weights[MAX_PATHS];
int weight_index = 0;

void dfs(int grid[][3], int m, int n, int x, int y, int current_weight) {
    // 越界或遇到障碍
    if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == -1) {
        return;
    }
    
    // 到达终点
    if (x == m - 1 && y == n - 1) {
        path_weights[weight_index++] = current_weight;
        path_count++;
        return;
    }

    // 临时保存当前格子权重并标记为障碍
    int temp_weight = grid[x][y];
    grid[x][y] = -1;

    // 向右或向下递归探索
    if (y + 1 < n) {
        dfs(grid, m, n, x, y + 1, current_weight + temp_weight);
    }
    if (x + 1 < m) {
        dfs(grid, m, n, x + 1, y, current_weight + temp_weight);
    }

    // 回溯恢复格子权重
    grid[x][y] = temp_weight;
}

int main() {
    int grid[3][3] = {
        {0, 2, 3},
        {1, -1, 1},
        {4, 1, 0}
    };
    int m = 3, n = 3;

    dfs(grid, m, n, 0, 0, 0);

    // 输出结果
    printf("Path Count: %d\n", path_count);
    printf("Path Weights: [");
    for (int i = 0; i < weight_index; i++) {
        printf("%d", path_weights[i]);
        if (i < weight_index - 1) printf(", ");
    }
    printf("]\n");

    return 0;
}
C代码详解
递归函数dfs：从(x, y)出发，累加当前路径权重current_weight，并在递归返回时恢复权重。
全局变量：path_count记录路径数，path_weights数组存储各条路径的权重。
递归和回溯：将探索过的格子暂时标记为障碍，避免重复访问，确保路径的独立性。
结果输出：输出路径数量和路径权重数组。
这道题目练习了复杂的路径查找、递归和状态回溯，在算法和数据结构中都有较深的应用
